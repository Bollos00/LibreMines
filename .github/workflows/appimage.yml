name: AppImage Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_call:
    inputs:
      version:
        description: 'Version tag for the release'
        required: false
        type: string
        default: ''
      upload_to_release:
        description: 'Whether to upload artifacts to a release'
        required: false
        type: boolean
        default: false

jobs:
  appimage:
    runs-on: ubuntu-22.04
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install build-essential qt6-base-dev qt6-tools-dev cmake \
            libqt6svg6-dev qt6-multimedia-dev libgl1-mesa-dev fuse libfuse2

          # Install GStreamer and PulseAudio dependencies for sound support
          sudo apt-get install \
            libunwind-dev \
            libgstreamer1.0-dev \
            libgstreamer-plugins-base1.0-dev \
            libgstreamer-plugins-base1.0.0 \
            gstreamer1.0-plugins-good \
            gstreamer1.0-plugins-bad \
            gstreamer1.0-pulseaudio \
            gstreamer1.0-alsa \
            libpulse-dev \
            libpulse0 \
            libasound2-dev \
            libasound2
      
      - name: Build LibreMines
        run: |
          mkdir build && cd build
          if [ "${{ inputs.upload_to_release }}" = "true" ]; then
            cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr ..
          else
            cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DBUILD_TESTS=ON ..
          fi
          make -j$(nproc)

      - name: "Run tests"
        if: inputs.upload_to_release != true
        run: "cd build && ctest --verbose --progress --output-on-failure"

      - name: Install LibreMines
        run: |
          cd build
          make install DESTDIR=AppDir
      
      - name: Download linuxdeploy tools
        run: |
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          chmod +x linuxdeploy*.AppImage

      - name: Prepare audio dependencies before linuxdeploy
        run: |
          cd build
          
          # Create directories for audio plugins
          mkdir -p AppDir/usr/lib/gstreamer-1.0
          mkdir -p AppDir/usr/lib/pulse-15.0/modules
          
          # Copy GStreamer plugins
          find /usr/lib -name "gstreamer-1.0" -type d -exec cp -r {}/* AppDir/usr/lib/gstreamer-1.0/ \; 2>/dev/null || true
          
          # Copy essential audio libraries
          cp /usr/lib/*/libgstreamer-1.0.so* AppDir/usr/lib/ 2>/dev/null || true
          cp /usr/lib/*/libgstbase-1.0.so* AppDir/usr/lib/ 2>/dev/null || true
          cp /usr/lib/*/libgstaudio-1.0.so* AppDir/usr/lib/ 2>/dev/null || true
          cp /usr/lib/*/libpulse*.so* AppDir/usr/lib/ 2>/dev/null || true
          cp /usr/lib/*/libasound*.so* AppDir/usr/lib/ 2>/dev/null || true
          
          # Copy PulseAudio modules if they exist
          find /usr/lib -path "*/pulse-*/modules" -exec cp -r {} AppDir/usr/lib/pulse-15.0/ \; 2>/dev/null || true
 
      - name: Create AppImage
        run: |
          cd build

          # Set environment for Qt6
          export QML_SOURCES_PATHS=""
          export QMAKE=/usr/bin/qmake6
          
          # Create AppImage with proper arguments
          ../linuxdeploy-x86_64.AppImage --appdir AppDir \
            --desktop-file AppDir/usr/share/applications/io.github.Bollos00.LibreMines.desktop \
            --executable AppDir/usr/bin/libremines \
            --icon-file AppDir/usr/share/icons/hicolor/scalable/apps/libremines.svg \
            --plugin qt \
            --output appimage


      - name: Rename AppImage for Release
        if: inputs.upload_to_release
        run: |
          cd build
          mv *.AppImage "LibreMines-${{ inputs.version }}-x86_64.AppImage"
      
      - name: Upload AppImage
        uses: actions/upload-artifact@v4
        with:
          name: LibreMines-AppImage-x86_64
          path: build/*.AppImage
          
      - name: Upload to Release
        if: inputs.upload_to_release
        uses: softprops/action-gh-release@v2
        with:
          files: build/*.AppImage