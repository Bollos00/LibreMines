name: AppImage Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_call:
    inputs:
      version:
        description: 'Version tag for the release'
        required: false
        type: string
        default: ''
      upload_to_release:
        description: 'Whether to upload artifacts to a release'
        required: false
        type: boolean
        default: false

jobs:
  appimage:
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        qt-version: [ '5.15.2', '6.8.3' ]
    
    steps:
      - uses: actions/checkout@v4

      - name: "Install Qt 5.15.2"
        if: matrix.qt-version == '5.15.2'
        uses: jurplel/install-qt-action@v4.3.0
        with:
          version: '5.15.2'
          host: 'linux'
          target: 'desktop'
          arch: 'gcc_64'

      - name: "Install Qt 6.8.3"
        if: matrix.qt-version == '6.8.3'
        uses: jurplel/install-qt-action@v4.3.0
        with:
          version: '6.8.3'
          host: 'linux'
          target: 'desktop'
          arch: 'linux_gcc_64'
          modules: 'qtmultimedia'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install build-essential cmake libgl1-mesa-dev fuse libfuse2
      
      - name: "Build LibreMines Qt 6.8.3"
        if: matrix.qt-version == '6.8.3'
        run: |
          mkdir build && cd build
          if [ "${{ inputs.upload_to_release }}" = "true" ]; then
            cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr ..
          else
            cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DBUILD_TESTS=ON ..
          fi
          make -j$(nproc)

      - name: "Build LibreMines Qt 5.15.2"
        if: matrix.qt-version == '5.15.2'
        run: |
          mkdir build && cd build
          if [ "${{ inputs.upload_to_release }}" = "true" ]; then
            cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DUSE_QT6='NO' ..
          else
            cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DUSE_QT6='NO' -DBUILD_TESTS=ON ..
          fi
          make -j$(nproc)

      - name: "Run tests"
        if: inputs.upload_to_release != true
        run: "cd build && ctest --verbose --progress --output-on-failure"

      - name: Install LibreMines
        run: |
          cd build
          make install DESTDIR=AppDir
      
      - name: Download linuxdeploy tools and AppImage runtime
        run: |
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          wget https://github.com/AppImage/type2-runtime/releases/download/continuous/runtime-x86_64
          chmod +x linuxdeploy*.AppImage appimagetool-x86_64.AppImage
      
      - name: "Create AppImage Qt 6.8.3"
        if: matrix.qt-version == '6.8.3'
        run: |
          cd build
          export QML_SOURCES_PATHS=""
          export QMAKE=$(which qmake6)
          echo "qmake6 found at: $QMAKE"
          # Bundle Qt6 dependencies with linuxdeploy
          ../linuxdeploy-x86_64.AppImage --appdir AppDir --plugin qt
          # Create final AppImage with appimagetool using pre-downloaded runtime
          ../appimagetool-x86_64.AppImage --runtime-file ../runtime-x86_64 AppDir

      - name: "Create AppImage Qt 5.15.2"
        if: matrix.qt-version == '5.15.2'
        run: |
          cd build
          export QML_SOURCES_PATHS=""
          export QMAKE=$(which qmake)
          echo "qmake found at: $QMAKE"
          # Bundle Qt5 dependencies with linuxdeploy
          ../linuxdeploy-x86_64.AppImage --appdir AppDir --plugin qt
          # Create final AppImage with appimagetool using pre-downloaded runtime
          ../appimagetool-x86_64.AppImage --runtime-file ../runtime-x86_64 AppDir

      - name: Rename AppImage for Release
        if: inputs.upload_to_release
        run: |
          cd build
          if [ "${{ matrix.qt-version }}" = "5.15.2" ]; then
            mv *.AppImage "LibreMines-${{ inputs.version }}-qt5-x86_64.AppImage"
          else
            mv *.AppImage "LibreMines-${{ inputs.version }}-qt6-x86_64.AppImage"
          fi
      
      - name: Upload AppImage
        uses: actions/upload-artifact@v4
        with:
          name: LibreMines-AppImage-qt-${{ matrix.qt-version }}-x86_64
          path: build/*.AppImage
          
      - name: Upload to Release
        if: inputs.upload_to_release
        uses: softprops/action-gh-release@v2
        with:
          files: build/*.AppImage